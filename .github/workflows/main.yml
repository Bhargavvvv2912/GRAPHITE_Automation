name: Autonomous Dependency Updater

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install agent dependencies
        run: pip install google-generativeai pypi-simple packaging

      - name: Run the Autonomous Agent
        run: python dependency_agent.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
      - name: Commit and push changes if any
        run: |
          git config --global user.name 'Dependency Agent'
          git config --global user.email 'agent@users.noreply.github.com'
          
          # Check if either of the agent-managed files have changed
          if ! git diff --quiet requirements.txt && ! git diff --quiet metrics_history.json; then
            echo "No dependency changes to commit."
            exit 0
          fi
          
          echo "Dependencies updated. Committing changes with metrics."
          
          COMMIT_BODY="Performance metrics for the new dependency set."
          if [ -f metrics_output.txt ]; then
            COMMIT_BODY=$(cat metrics_output.txt)
          fi
          
          # Add both requirements.txt and the history file to the commit
          git add requirements.txt metrics_history.json
          
          # Use [skip ci] to prevent infinite loops
          git commit -m "chore(deps): Autonomously update dependencies [skip ci]" -m "$COMMIT_BODY"
          
          # Clean up the temporary metrics file
          rm -f metrics_output.txt

          git push

  validate-on-other-versions:
    # This job only runs if the main job made a commit, which means this check is implicitly handled.
    needs: update-dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install updated dependencies
        run: pip install -r requirements.txt

      - name: Run validation on Python ${{ matrix.python-version }}
        run: |
          bash ./make_output_folders.sh
          python3 main.py -v 14 -t 1 --tr_lo 0.65 --tr_hi 0.85 -s score.py -n GTSRB --heatmap=Target --coarse_mode=binary -b 100 -m 100
